// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieReview.Database;

#nullable disable

namespace MovieReview.Database.Migrations
{
    [DbContext(typeof(MovieReviewContext))]
    partial class MovieReviewContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MovieReview.Core.Domain.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("BirthDate");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Actors", (string)null);
                });

            modelBuilder.Entity("MovieReview.Core.Domain.Entities.ActorTitle", b =>
                {
                    b.Property<int>("IdActor")
                        .HasColumnType("int")
                        .HasColumnName("IdActor");

                    b.Property<int>("IdTitle")
                        .HasColumnType("int")
                        .HasColumnName("IdTitle");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("IdActor", "IdTitle");

                    b.HasIndex("IdTitle");

                    b.ToTable("ActorsTitles", (string)null);
                });

            modelBuilder.Entity("MovieReview.Core.Domain.Entities.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("BirthDate");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Directors", (string)null);
                });

            modelBuilder.Entity("MovieReview.Core.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int>("IdTitle")
                        .HasColumnType("int")
                        .HasColumnName("IdTitle");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("IdUser");

                    b.Property<int>("Note")
                        .HasColumnType("int")
                        .HasColumnName("Note");

                    b.HasKey("Id");

                    b.HasIndex("IdTitle");

                    b.HasIndex("IdUser");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("MovieReview.Core.Domain.Entities.Screenwriter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("BirthDate");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Screenwriters", (string)null);
                });

            modelBuilder.Entity("MovieReview.Core.Domain.Entities.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationDate");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("Duration");

                    b.Property<int>("Genre")
                        .HasColumnType("int")
                        .HasColumnName("Genre");

                    b.Property<int>("IdDirector")
                        .HasColumnType("int")
                        .HasColumnName("IdDirector");

                    b.Property<int>("IdScreenwriter")
                        .HasColumnType("int")
                        .HasColumnName("IdScreenwriter");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Synopsis");

                    b.Property<string>("TitleMovie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TitleMovie");

                    b.Property<int>("TypeMovie")
                        .HasColumnType("int")
                        .HasColumnName("TypeMovie");

                    b.HasKey("Id");

                    b.HasIndex("IdDirector");

                    b.HasIndex("IdScreenwriter");

                    b.ToTable("Titles", (string)null);
                });

            modelBuilder.Entity("MovieReview.Core.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Password");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("Roles");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("MovieReview.Core.Domain.Entities.ActorTitle", b =>
                {
                    b.HasOne("MovieReview.Core.Domain.Entities.Actor", "Actor")
                        .WithMany()
                        .HasForeignKey("IdActor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieReview.Core.Domain.Entities.Title", "Title")
                        .WithMany()
                        .HasForeignKey("IdTitle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("MovieReview.Core.Domain.Entities.Review", b =>
                {
                    b.HasOne("MovieReview.Core.Domain.Entities.Title", "Title")
                        .WithMany("Reviews")
                        .HasForeignKey("IdTitle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieReview.Core.Domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Title");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieReview.Core.Domain.Entities.Title", b =>
                {
                    b.HasOne("MovieReview.Core.Domain.Entities.Director", "Director")
                        .WithMany("Titles")
                        .HasForeignKey("IdDirector")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieReview.Core.Domain.Entities.Screenwriter", "Screenwriter")
                        .WithMany("Titles")
                        .HasForeignKey("IdScreenwriter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Screenwriter");
                });

            modelBuilder.Entity("MovieReview.Core.Domain.Entities.Director", b =>
                {
                    b.Navigation("Titles");
                });

            modelBuilder.Entity("MovieReview.Core.Domain.Entities.Screenwriter", b =>
                {
                    b.Navigation("Titles");
                });

            modelBuilder.Entity("MovieReview.Core.Domain.Entities.Title", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MovieReview.Core.Domain.Entities.User", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
